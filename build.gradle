buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}
plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	//querydsl 추가
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'java'
}

group = 'com.ssghot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//s3서버 의존성 추가
	implementation('org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE')
	//querydsl 추가

	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

	testImplementation 'org.springframework.security:spring-security-test'
	// 운영할 때 삭제
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'
	developmentOnly('org.springframework.boot:spring-boot-devtools')
	// https://mvnrepository.com/artifact/com.auth0/java-jwt
	implementation group: 'com.auth0', name: 'java-jwt', version: '3.19.2'
	// oauth
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client', version: '2.7.2'

	// sms 인증
//	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

}

tasks.named('test') {
	useJUnitPlatform()
}//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
compileQuerydsl.doFirst {
	if(file(querydslDir).exists() )
	delete(file(querydslDir))
}

//querydsl 추가 끝

bootJar{
	destinationDirectory = file("./target")
}